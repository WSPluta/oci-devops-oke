version: 0.1
component: command
timeoutInSeconds: 25000
failImmediatelyOnError: true
shell: bash

env:
  vaultVariables:
    WEB_AUTH_TOKEN: ${web_auth_token_id}

steps:
  - type: Command
    name: "WEB_AUTH_TOKEN"
    shell: bash
    timeoutInSeconds: 10
    command: |
      echo "WEB_AUTH_TOKEN: $WEB_AUTH_TOKEN"
  - type: Command
    name: "Install nodejs"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      yum --disablerepo=ol7_oci_included install -y oracle-nodejs-release-el7 oracle-release-el7
      yum --disablerepo=ol7_oci_included install -y nodejs
  - type: Command
    name: "Git Clone"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      git clone ${github_repo_url}
  - type: Command
    name: "Setup kube config"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      oci ce cluster create-kubeconfig --cluster-id ${cluster} \
        --file $HOME/.kube/config --region ${region} --token-version 2.0.0  \
        --kube-endpoint PUBLIC_ENDPOINT
  - type: Command
    name: "Custom Kustomize with versions"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      cd /workspace/oci-devops-oke
      npx zx scripts/kustom.mjs ${region_key}
  # - type: Command
  #   name: "Create OCIR Secret"
  #   shell: bash
  #   timeoutInSeconds: 3000
  #   command: |
  #     kubectl create secret docker-registry ocir-secret \
  #       --docker-server=${region_key}.ocir.io \
  #       --docker-username="${oci_namespace}/${ocir_user}" \
  #       --docker-password="$AUTH_TOKEN" \
  #       --docker-email=${ocir_user}
  - type: Command
    name: "Apply kustomization"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      kubectl apply -k ./oci-devops-oke/k8s/overlay/prod
  - type: Command
    name: "Wait for Load Balancer (sleep)"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      sleep 60
  - type: Command
    name: "Get Load Balancer IP address"
    shell: bash
    timeoutInSeconds: 3000
    command: |
      LB_PUBLIC_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
      echo "http://$LB_PUBLIC_IP/"